{
  "componentDescriptors": [
    {
      "hidden": false,
      "displayName": "File Delete",
      "description": "Deletes a file from the file system with the given File name. An error is raised if the given file could not be found. The file name can be a dynamic expression.",
      "fullyQualifiedName": "com.reedelk.file.component.FileDelete",
      "componentType": "PROCESSOR",
      "componentPropertyDescriptors": [
        {
          "example": "/var/logs/log1.txt",
          "hintValue": "/var/logs/sample.txt",
          "displayName": "File name",
          "propertyName": "fileName",
          "initValue": "###USE_DEFAULT_VALUE###",
          "propertyInfo": "The path and name of the file to be deleted from the file system.\t",
          "propertyType": {
            "classname": "com.reedelk.module.descriptor.model.TypeDynamicValueDescriptor",
            "instance": {
              "type": "com.reedelk.runtime.api.script.dynamicvalue.DynamicString"
            }
          },
          "whenDescriptors": []
        }
      ]
    },
    {
      "hidden": false,
      "displayName": "File Read",
      "description": "Reads a file from the file system from the given File name and optionally provided Base path. The file read strategy determines if the file should be streamed from the file system or loaded into memory before continuing with the execution of the flow. The component can also be configured to acquire a lock before reading the file.",
      "fullyQualifiedName": "com.reedelk.file.component.FileRead",
      "componentType": "PROCESSOR",
      "componentPropertyDescriptors": [
        {
          "example": "/var/logs/log1.txt",
          "displayName": "File name",
          "propertyName": "fileName",
          "initValue": "###USE_DEFAULT_VALUE###",
          "propertyInfo": "The path and name of the file to be read from the file system.",
          "propertyType": {
            "classname": "com.reedelk.module.descriptor.model.TypeDynamicValueDescriptor",
            "instance": {
              "type": "com.reedelk.runtime.api.script.dynamicvalue.DynamicString"
            }
          },
          "whenDescriptors": []
        },
        {
          "example": "/var/logs",
          "displayName": "Base path",
          "propertyName": "basePath",
          "initValue": "###USE_DEFAULT_VALUE###",
          "propertyInfo": "Optional base path from which files with the given \u003ci\u003eFile name\u003c/i\u003e will be read from. The final file will be read from \u003ci\u003eBase Path\u003c/i\u003e + \u003ci\u003eFile Name\u003c/i\u003e.",
          "propertyType": {
            "classname": "com.reedelk.module.descriptor.model.TypePrimitiveDescriptor",
            "instance": {
              "type": "java.lang.String"
            }
          },
          "whenDescriptors": []
        },
        {
          "example": "STREAM",
          "displayName": "Read mode",
          "propertyName": "mode",
          "initValue": "DEFAULT",
          "propertyInfo": "Determines the read strategy. When \u003ci\u003eDefault\u003c/i\u003e the file is completely read into memory. When \u003ci\u003eStream\u003c/i\u003e the file is read only on demand only when the message payload is being consumed. This is the preferred method to read large files from the filesystem.",
          "propertyType": {
            "classname": "com.reedelk.module.descriptor.model.TypeEnumDescriptor",
            "instance": {
              "nameAndDisplayNameMap": {
                "STREAM": "Stream",
                "DEFAULT": "Default"
              },
              "type": "java.lang.Enum"
            }
          },
          "whenDescriptors": []
        },
        {
          "example": "false",
          "displayName": "Auto mime type",
          "propertyName": "autoMimeType",
          "initValue": "true",
          "propertyInfo": "If true, the mime type of the payload is determined from the extension of the file read.",
          "propertyType": {
            "classname": "com.reedelk.module.descriptor.model.TypePrimitiveDescriptor",
            "instance": {
              "type": "boolean"
            }
          },
          "whenDescriptors": []
        },
        {
          "example": "text/xml",
          "displayName": "Mime type",
          "propertyName": "mimeType",
          "initValue": "application/octet-stream",
          "propertyInfo": "The mime type of the file read from the filesystem.",
          "propertyType": {
            "classname": "com.reedelk.module.descriptor.model.TypeComboDescriptor",
            "instance": {
              "editable": true,
              "prototype": "XXXXXXXXXXXXXXXXXXXXXXXXXX",
              "comboValues": [
                "text/css",
                "text/html",
                "text/plain",
                "text/richtext",
                "text/scriptlet",
                "text/tab-separated-values",
                "text/csv",
                "text/webviewhtml",
                "text/x-component",
                "text/x-setext",
                "text/x-vcard",
                "text/xml",
                "text/json",
                "text/javascript",
                "image/bmp",
                "image/gif",
                "image/png",
                "image/jpeg",
                "image/pipeg",
                "image/svg+xml",
                "image/tiff",
                "image/x-cmu-raster",
                "image/x-cmx",
                "image/x-icon",
                "image/x-portable-anymap",
                "image/x-portable-bitmap",
                "image/x-portable-graymap",
                "image/x-portable-pixmap",
                "image/x-rgb",
                "image/x-xbitmap",
                "image/x-xpixmap",
                "image/x-xwindowdump",
                "image/ief",
                "message/rfc822",
                "video/mpeg",
                "video/mp4",
                "video/quicktime",
                "video/x-la-asf",
                "video/x-ms-asf",
                "video/x-msvideo",
                "video/x-sgi-movie",
                "audio/basic",
                "audio/mid",
                "audio/mpeg",
                "audio/x-aiff",
                "audio/x-mpegurl",
                "audio/x-pn-realaudio",
                "audio/x-wav",
                "application/envoy",
                "application/fractals",
                "application/futuresplash",
                "application/hta",
                "application/msword",
                "application/octet-stream",
                "application/oda",
                "application/olescript",
                "application/pdf",
                "application/pics-rules",
                "application/pkcs10",
                "application/pkix-crl",
                "application/postscript",
                "application/rtf",
                "application/set-payment-initiation",
                "application/set-registration-initiation",
                "application/vnd.ms-excel",
                "application/vnd.ms-outlook",
                "application/vnd.ms-pkicertstore",
                "application/vnd.ms-pkiseccat",
                "application/vnd.ms-pkistl",
                "application/vnd.ms-powerpoint",
                "application/vnd.ms-project",
                "application/vnd.ms-works",
                "application/winhlp",
                "application/x-bcpio",
                "application/x-cdf",
                "application/x-compress",
                "application/x-compressed",
                "application/x-cpio",
                "application/x-csh",
                "application/x-director",
                "application/x-dvi",
                "application/x-gtar",
                "application/x-gzip",
                "application/x-hdf",
                "application/x-internet-signup",
                "application/x-javascript",
                "application/x-latex",
                "application/x-msaccess",
                "application/x-mscardfile",
                "application/x-msclip",
                "application/x-msdownload",
                "application/x-msmediaview",
                "application/x-msmetafile",
                "application/x-msmoney",
                "application/x-mspublisher",
                "application/x-msschedule",
                "application/x-msterminal",
                "application/x-mswrite",
                "application/x-netcdf",
                "application/x-pkcs12",
                "application/x-pkcs7-certificates",
                "application/x-pkcs7-certreqresp",
                "application/x-pkcs7-mime",
                "application/x-pkcs7-signature",
                "application/x-sh",
                "application/x-shar",
                "application/x-shockwave-flash",
                "application/x-tar",
                "application/x-x509-ca-cert",
                "application/zip",
                "application/atom+xml",
                "application/rss+xml",
                "application/xml",
                "application/json",
                "application/java",
                "application/x-www-form-urlencoded",
                "*/*",
                "content/unknown",
                "multipart/form-data"
              ],
              "type": "com.reedelk.runtime.api.annotation.Combo"
            }
          },
          "whenDescriptors": [
            {
              "propertyName": "autoMimeType",
              "propertyValue": "false"
            },
            {
              "propertyName": "autoMimeType",
              "propertyValue": "###BLANK###"
            }
          ]
        },
        {
          "displayName": "Configuration",
          "propertyName": "configuration",
          "initValue": "###USE_DEFAULT_VALUE###",
          "propertyType": {
            "classname": "com.reedelk.module.descriptor.model.TypeObjectDescriptor",
            "instance": {
              "shared": "NO",
              "collapsible": "YES",
              "typeFullyQualifiedName": "com.reedelk.file.read.FileReadConfiguration",
              "objectProperties": [
                {
                  "example": "true",
                  "displayName": "Lock file",
                  "propertyName": "lockFile",
                  "initValue": "###USE_DEFAULT_VALUE###",
                  "propertyInfo": "If true a lock on the file is acquired before reading its content.",
                  "propertyType": {
                    "classname": "com.reedelk.module.descriptor.model.TypePrimitiveDescriptor",
                    "instance": {
                      "type": "java.lang.Boolean"
                    }
                  },
                  "whenDescriptors": []
                },
                {
                  "example": "7",
                  "hintValue": "5",
                  "displayName": "Lock retry max attempts",
                  "propertyName": "lockRetryMaxAttempts",
                  "initValue": "###USE_DEFAULT_VALUE###",
                  "propertyInfo": "Sets the max lock attempts before throwing an error.",
                  "propertyType": {
                    "classname": "com.reedelk.module.descriptor.model.TypePrimitiveDescriptor",
                    "instance": {
                      "type": "java.lang.Integer"
                    }
                  },
                  "whenDescriptors": [
                    {
                      "propertyName": "lockFile",
                      "propertyValue": "true"
                    }
                  ]
                },
                {
                  "example": "500",
                  "hintValue": "700",
                  "displayName": "Lock retry wait time (ms)",
                  "propertyName": "lockRetryWaitTime",
                  "initValue": "###USE_DEFAULT_VALUE###",
                  "propertyInfo": "Sets the wait time between two file lock attempts in milliseconds.",
                  "propertyType": {
                    "classname": "com.reedelk.module.descriptor.model.TypePrimitiveDescriptor",
                    "instance": {
                      "type": "java.lang.Long"
                    }
                  },
                  "whenDescriptors": [
                    {
                      "propertyName": "lockFile",
                      "propertyValue": "true"
                    }
                  ]
                },
                {
                  "example": "262144",
                  "hintValue": "65536",
                  "displayName": "Read buffer size",
                  "propertyName": "readBufferSize",
                  "initValue": "###USE_DEFAULT_VALUE###",
                  "propertyInfo": "The buffer size used to read the files from filesystem. This parameter can be used to improve read performances. If the files are big the buffer size should be bigger, otherwise for very small files it should be kept smaller.",
                  "propertyType": {
                    "classname": "com.reedelk.module.descriptor.model.TypePrimitiveDescriptor",
                    "instance": {
                      "type": "java.lang.Integer"
                    }
                  },
                  "whenDescriptors": []
                }
              ],
              "type": "com.reedelk.module.descriptor.model.TypeObjectDescriptor$TypeObject"
            }
          },
          "whenDescriptors": []
        }
      ]
    },
    {
      "hidden": false,
      "displayName": "File Write",
      "description": "Writes a file to the file system to the given File name and optionally provided Base path. The write mode can be used to override an existing file, create new file if it does not exists or append to the existing file if exists already.",
      "fullyQualifiedName": "com.reedelk.file.component.FileWrite",
      "componentType": "PROCESSOR",
      "componentPropertyDescriptors": [
        {
          "example": "/var/logs/log1.txt",
          "hintValue": "/var/logs/log1.txt",
          "displayName": "File name",
          "propertyName": "filePath",
          "initValue": "###USE_DEFAULT_VALUE###",
          "propertyInfo": "The path and name of the file to be written on the file system.",
          "propertyType": {
            "classname": "com.reedelk.module.descriptor.model.TypeDynamicValueDescriptor",
            "instance": {
              "type": "com.reedelk.runtime.api.script.dynamicvalue.DynamicString"
            }
          },
          "whenDescriptors": []
        },
        {
          "example": "/var/logs",
          "displayName": "Base path",
          "propertyName": "basePath",
          "initValue": "###USE_DEFAULT_VALUE###",
          "propertyInfo": "Optional base path from which files with the given \u003ci\u003eFile name\u003c/i\u003e will be written to. The final file will be written into \u003ci\u003eBase Path\u003c/i\u003e + \u003ci\u003eFile Name\u003c/i\u003e.",
          "propertyType": {
            "classname": "com.reedelk.module.descriptor.model.TypePrimitiveDescriptor",
            "instance": {
              "type": "java.lang.String"
            }
          },
          "whenDescriptors": []
        },
        {
          "example": "APPEND",
          "displayName": "Write mode",
          "propertyName": "mode",
          "initValue": "OVERWRITE",
          "propertyInfo": "Sets the file write mode. Possible values are \u003cb\u003eOVERWRITE\u003c/b\u003e, \u003cb\u003eCREATE_NEW\u003c/b\u003e, \u003cb\u003eAPPEND\u003c/b\u003e.",
          "propertyType": {
            "classname": "com.reedelk.module.descriptor.model.TypeEnumDescriptor",
            "instance": {
              "nameAndDisplayNameMap": {
                "OVERWRITE": "Overwrite",
                "CREATE_NEW": "Create new",
                "APPEND": "Append"
              },
              "type": "java.lang.Enum"
            }
          },
          "whenDescriptors": []
        },
        {
          "displayName": "Configuration",
          "propertyName": "configuration",
          "initValue": "###USE_DEFAULT_VALUE###",
          "propertyType": {
            "classname": "com.reedelk.module.descriptor.model.TypeObjectDescriptor",
            "instance": {
              "shared": "NO",
              "collapsible": "YES",
              "typeFullyQualifiedName": "com.reedelk.file.write.FileWriteConfiguration",
              "objectProperties": [
                {
                  "example": "true",
                  "displayName": "Create directories",
                  "propertyName": "createParentDirectory",
                  "initValue": "###USE_DEFAULT_VALUE###",
                  "propertyInfo": "If true, missing directories will be created on the filesystem before writing the file.",
                  "propertyType": {
                    "classname": "com.reedelk.module.descriptor.model.TypePrimitiveDescriptor",
                    "instance": {
                      "type": "java.lang.Boolean"
                    }
                  },
                  "whenDescriptors": []
                },
                {
                  "example": "true",
                  "displayName": "Lock file",
                  "propertyName": "lockFile",
                  "initValue": "###USE_DEFAULT_VALUE###",
                  "propertyInfo": "If true a lock on the file is acquired before writing the content.",
                  "propertyType": {
                    "classname": "com.reedelk.module.descriptor.model.TypePrimitiveDescriptor",
                    "instance": {
                      "type": "java.lang.Boolean"
                    }
                  },
                  "whenDescriptors": []
                },
                {
                  "example": "5",
                  "hintValue": "3",
                  "displayName": "Lock retry max attempts",
                  "propertyName": "lockRetryMaxAttempts",
                  "initValue": "###USE_DEFAULT_VALUE###",
                  "propertyInfo": "Sets the max lock attempts before throwing an error.",
                  "propertyType": {
                    "classname": "com.reedelk.module.descriptor.model.TypePrimitiveDescriptor",
                    "instance": {
                      "type": "java.lang.Integer"
                    }
                  },
                  "whenDescriptors": [
                    {
                      "propertyName": "lockFile",
                      "propertyValue": "true"
                    }
                  ]
                },
                {
                  "example": "600",
                  "hintValue": "500",
                  "displayName": "Lock retry wait time (ms)",
                  "propertyName": "lockRetryWaitTime",
                  "initValue": "###USE_DEFAULT_VALUE###",
                  "propertyInfo": "Sets the wait time (in milliseconds) between two file lock attempts.",
                  "propertyType": {
                    "classname": "com.reedelk.module.descriptor.model.TypePrimitiveDescriptor",
                    "instance": {
                      "type": "java.lang.Long"
                    }
                  },
                  "whenDescriptors": [
                    {
                      "propertyName": "lockFile",
                      "propertyValue": "true"
                    }
                  ]
                },
                {
                  "example": "524288",
                  "hintValue": "65536",
                  "displayName": "Write buffer size",
                  "propertyName": "writeBufferSize",
                  "initValue": "###USE_DEFAULT_VALUE###",
                  "propertyInfo": "The buffer size used to write the files to filesystem. This parameter can be used to improve write performances. If the files are big the buffer size should be bigger, otherwise for very small files it should be kept smaller.",
                  "propertyType": {
                    "classname": "com.reedelk.module.descriptor.model.TypePrimitiveDescriptor",
                    "instance": {
                      "type": "java.lang.Integer"
                    }
                  },
                  "whenDescriptors": []
                }
              ],
              "type": "com.reedelk.module.descriptor.model.TypeObjectDescriptor$TypeObject"
            }
          },
          "whenDescriptors": []
        }
      ]
    }
  ],
  "autocompleteContributorDescriptors": []
}